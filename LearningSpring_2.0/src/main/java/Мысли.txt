    Создать
Написать класс/метод, который будет помогать измерять время участка кода, с возможностью установления временных флагов
        в теле программы(флаг старта, промежуточный флаг, флаг завершения)


    Заметки
HTTP запросы:
    GET  - обращаемся к серверу, чтобы он вернул html. В URL можно передавать пару ключ-значение(для уточнения)
    POST - добавить что-то на сервер(все параметры хранятся в теле запроса)
        1xx — информационный. Запрос получен, сервер готов к продолжению;
        2xx — успешный. Запрос получен, понятен и обработан;
        3xx — перенаправление. Следующие действия нужно выполнить для обработки запроса;
        4xx — ошибка клиента. Запрос содержит ошибки или не отвечает протоколу;
        5xx — ошибка сервера. Сервер не смог обработать запрос, хотя был составлен верно;
    запрос на сервер (request) и ответ от сервера (response).

Servlet API — стандартизированный API, предназначенный для реализации на сервере и работе с клиентом по схеме запрос-ответ.
Tomcat — это контейнер сервлетов: именно он обрабатывает входящие запросы извне и передает их нашему приложению.
Контейнер сервлетов - Это программа, которая запускается на сервере и умеет взаимодействовать с созданными нами сервлетами.(Аналоги: GlassFish(для javaEE), WildFly, Jetty, WebLogic, WebSphere)
    Когда клиент обращается на сервер, контейнер обрабатывает его запрос, определяет, какой именно сервлет должен его обработать и передает его.
    Кроме маршрутизации запросов, контейнер сервлетов выполняет и другие функции:
    - Динамически генерирует HTML-страницы с JSP-файлов.
    - Зашифровывает/расшифровывает HTTPS-сообщения.
    - Предоставляет разграниченный доступ для администрирования сервлетов.
JSP (Java Server Pages) - это технология, которая позволяет вставлять в HTML-страницу куски JAVA-кода.
    Thymeleaf(шаблонизатор) - это аналог JSP
Rest - соглашение для API(чтобы было проще взаимодействовать другим приложениям с нашим API)
JSON - способ передачи объекта в виде текста.


OSI:
    7ур Прикладной - Использование протоколов. Он обеспечивает взаимодействие приложений с сетью, базой данных.
        Существует множество протоколов, которые используются на этом уровне: TELNET и HTTP/HTTPS и т.д.
    6ур Представления - отвечает за кодирование/декодирование данных.
    5ур Сеансовый - создает и управляет сеансами(сессиями) связи приложений.
            У каждой сессии есть уникальный идентификатора (ID), что позволяет приложению различать пользователей.
            В ней можно сохранять нужную нам информацию о юзере, об истории их взаимодействия.
    4ур Транспортный - указывается какому конкретно приложению отправляется сообщение. Для этого используется порт(port).
            Он добавляется к IP-адресу после двоеточия: 192.0.2.235:8080.
    3ур Сетевой     - для определения IP-адресов отдельных пользователей сети и маршрутов к ним.
    2ур Канальный  -
    1ур Физический - передаются набор битов(кадр).

DNS-сервис - хранит в себе "IPv4:port" для каждого указанного нами сайта. Сначала обращаемся к DNS, он возвращает "IPv4:port" и мы переходим по этому адресу
