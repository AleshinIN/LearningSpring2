SpringCore:
@Configuration: Используется, чтобы указать, что класс объявляет один или несколько@Beanметод.
    Эти классы обрабатываются контейнером Spring для генерации определений компонентов и
        запросов на обслуживание для этих компонентов во время выполнения.
@Bean: Указывает, что метод генерирует bean-компонент, управляемый контейнером Spring.
    Данная аннотация используется в классе Configuration. Аннотацию @Bean также можно использовать
        с такими параметрами, как:
            name-позволяет дать имя бину
            initMethod - позволяет выбрать метод, который будет вызываться перед созданием объекта
            destroyMethod - позволяет выбрать метод, который будет вызываться при закрытии объекта
@PostConstruct / @PreDestroy - Это альтернатива init/destroy методам. Помечаем методы класса, бин которого хотим создать
@ComponentScan -  для использования с классом @Configuration. Где искать компоненты(Контроллеры).
@Component - (универсальный компонент)создать бин нашего класса. Создавать их экземпляры и внедрять в них любые указанные зависимости Вставлять их везде, где это необходимо.
    Является родителем для @Controller, @Service, @Repository - они делают тоже самое, и нужны чтобы логически описать что делает данный класс.
@Controller - (Слой представления) Данный класс представляет собой компонент, похожий на обычный сервлет (HttpServlet)
    (работающий с объектами HttpServletRequest и HttpServletResponse), но с расширенными возможностями от Spring Framework.
@RestController - указывает, что будет тело ответа у методов данного контроллера.
@Service: (Сервис-слой приложения) часть некоторой бизнес логики. Аннотация, объявляющая, что этот класс представляет собой сервис – компонент сервис-слоя.
    Сервис является подтипом класса @Component. Использование данной аннотации позволит искать бины-сервисы автоматически.
@Repository: (Доменный слой)  компонент, который предназначен для хранения, извлечения и поиска. Как правило, используется для работы с базами данных.
    Аннотация показывает, что класс функционирует как репозиторий и требует наличия прозрачной
    трансляции исключений. Преимуществом трансляции исключений является то, что слой сервиса будет иметь дело
    с общей иерархией исключений от Spring (DataAccessException) вне зависимости от используемых технологий доступа к данным в слое данных.
-@PropertySource: Предоставляет простой механизм объявления для добавления источников свойств в среду Spring.
-@Transactional - Перед исполнением метода помеченного данной аннотацией начинается транзакция, после выполнения метода
    транзакция коммитится, при выбрасывании RuntimeException откатывается.
@Autowired - Аннотация позволяет автоматически установить значение поля.
@AllArgsConstructor - позволяет инжектить(подсовывать бины из вне) все поля данного класса без конструктора
@Scope - Аннотация для установки области жизни бина:
    singleton (только один экземпляр бина создается для IoC контейнера; значение по умолчанию ),
    prototype (создается новый экземпляр бина когда приходит запрос на его создание),
    request (один экземпляр бина для каждого HTTP запроса ), session (один экземпляр бина для каждой сессии),
    globalSession (один экземпляр бина для каждой глобальной сессии)
-@Profile - Аннотация для создания профилей конфигурации проекта. Может применяться как к бинам так и к конфигурационным классам.

Spring MVC Annotations:
-@RequestMapping - Аннотация используется для маппинга(обработка связывания) урл-адреса запроса на указанный метод или класс.
    Можно указывать конкретный HTTP-метод, который будет обрабатываться (GET/POST), передавать параметры запроса.
@GetMapping - применяется к методу чтобы указать, какой путь URL при GET-запросе вызывает данный метод-контроллер
@PostMapping - ловим POST запрос от пользователя
@RequestParam - указывает на переменную, которую нужно извлечь из URL-запроса. Если её нет, то нужно прописать required = false, в противном случае ошибка
@PathVariable - Аннотация, которая показывает, что параметр метода должен быть связан с переменной из урл-адреса.
@ModelAttribute("ключ") - Аннотация, связывающая параметр метода или возвращаемое значение метода с атрибутом модели,
    которая будет использоваться при выводе jsp-страницы. Т.е. указав эту аннотацию над методом, мы можем обратиться
    по ключу к значению return данного метода(к примеру, если это объект) из любого другого места данного класса-контроллера.
    Если пометить аргумент, метод которого помечен @PostMapping, то поведение совершенно другое:
        -принимает значения из формы(из POST) и засовывает их в новый объект класса, для которого предназначались эти значения.
        -добавляет данный объект в model(ключ использует тот, который указан в самой аннотации)
-@RequestBody и @ResponseBody
-@RequestHeader и @ResponseHeader

Spring Boot Annotations:
@SpringBootApplication - указывает главный класс, для запуска проекта
-@EnableAutoConfiguration


Вспомогательные классы:
HttpServletRequest - указывается в качестве аргумента метода контроллера. Тоже самое, что @RequestParam, но позволяет взять сразу все параметры запроса
Model - указывается в качестве аргумента(спринг сам внедряет).